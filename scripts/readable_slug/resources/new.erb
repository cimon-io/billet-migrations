class CreateSlugSystem < ActiveRecord::Migration[##{Rails::VERSION::MAJOR}.##{Rails::VERSION::MINOR}]
  VOWELS = %w[A E I O U Y].freeze
  CONSONANTS = %w[B C D F G H J K L M N P Q R S T V W X Z].freeze
  SEED = ##{38.times.map { |i| rand(10) }.join}

  def up
    add_tables_and_columns
    create_static_sql_functions
    generate_prefixes
  end

  private

  def add_tables_and_columns
    create_table :prefix_letters do |t|
      t.string :key, null: false, unique: true
      t.column :table_name, :regclass, null: false, unique: true
    end

    create_table :prefix_sequence_list do |t|
      t.date :key, null: false, unique: true
      t.string :sequence, null: false, unique: true
    end
    # add column if table already exists
    # add_column :prefix_sequence_list, :clients_sequence_reseted, :boolean, null: false, default: false

    add_index :prefix_sequence_list, :key, unique: true
  end

  def generate_prefixes
    codes = VOWELS.each_with_object([]) do |a, obj|
      CONSONANTS.each { |b| CONSONANTS.each { |c| obj.push("#{b}#{a}#{c}") } }
    end

    start_date = Date.yesterday

    values = codes.shuffle(random: Random.new(SEED)).map do |code|
      start_date = start_date.tomorrow
      %(('#{start_date}', '#{code}'))
    end

    execute <<~SQL
      INSERT INTO prefix_sequence_list ("key", "sequence") VALUES #{values.join(', ')};
    SQL
  end

  def create_static_sql_functions
    execute(
      <<~SQL
        CREATE OR REPLACE FUNCTION generate_slug(table_name regclass, seq_name TEXT) RETURNS TEXT AS $$
        DECLARE
          daily_code TEXT;
          prefix TEXT;
        BEGIN
          SELECT fetch_daily_code(table_name, seq_name) INTO daily_code;
          SELECT fetch_table_prefix(table_name) INTO prefix;

          RETURN CONCAT_WS('-', prefix, daily_code, nextval(seq_name));
        END;
        $$ LANGUAGE plpgsql;

        CREATE OR REPLACE FUNCTION fetch_daily_code(table_name regclass, seq_name TEXT) RETURNS TEXT AS $$
        DECLARE
          prefix_sequence_list_id prefix_sequence_list.id%TYPE;
          daily_code TEXT;
          used BOOLEAN;
        BEGIN
          EXECUTE format('SELECT sl.id, sl.sequence, sl.%s_sequence_reseted FROM prefix_sequence_list AS sl WHERE sl.key = now()::date LIMIT 1;', table_name) INTO prefix_sequence_list_id, daily_code, used;

          IF NOT used THEN
            EXECUTE format('UPDATE prefix_sequence_list AS sl SET %s_sequence_reseted = TRUE WHERE sl.id = %s;', table_name, prefix_sequence_list_id);
            EXECUTE format('ALTER SEQUENCE %s RESTART WITH 1;', seq_name);
          END IF;

          RETURN daily_code;
        END;
        $$ LANGUAGE plpgsql;

        CREATE OR REPLACE FUNCTION fetch_table_prefix(tname regclass) RETURNS TEXT AS $$
        DECLARE
          prefix TEXT;
        BEGIN
          SELECT key INTO prefix FROM prefix_letters WHERE "table_name" = tname LIMIT 1;

          RETURN prefix;
        END;
        $$ LANGUAGE plpgsql;

        CREATE OR REPLACE FUNCTION restrict_slug_update() RETURNS TRIGGER AS $$
        BEGIN
          NEW.slug = OLD.slug;
          RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
      SQL
    )
  end
end
