class TimestampsFor##{tablename.camelcase} < ActiveRecord::Migration[##{Rails::VERSION::MAJOR}.##{Rails::VERSION::MINOR}]
  def up
    create_or_replace_touch_functions_and_triggers_on(:insert)
    create_or_replace_touch_functions_and_triggers_on(:update)
    create_or_replace_touch_functions_and_triggers_on(:destroy)
  end

  private

  def table_names
    %w[##{tablename}].sort
  end

  def create_or_replace_touch_functions_and_triggers_on(action)
    table_names.each do |table_name|
      options = touch_options_for(table_name)
      # next if options.none?

      execute %{
        CREATE OR REPLACE FUNCTION touch_for_#{table_name}_on_#{action}() RETURNS TRIGGER AS $$
        BEGIN#{dynamic_touch_query(options)}
          #{"SELECT CURRENT_TIMESTAMP INTO NEW.updated_at;\n          " if action == :update}RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
      }

      create_touch_trigger_for(table_name, action)
    end
  end

  def create_touch_trigger_for(table_name, action)
    execute %{
      CREATE TRIGGER touch_dependent_tables_on_#{action} BEFORE #{action.upcase} ON #{table_name}
      FOR EACH ROW EXECUTE PROCEDURE touch_for_#{table_name}_on_#{action}();
    }
  end

  def touch_options_for(table_name)
    execute %(
      SELECT ccu.table_name AS foreign_table_name, kcu.column_name AS column_name
      FROM information_schema.table_constraints AS tc
        JOIN information_schema.key_column_usage AS kcu
        ON tc.constraint_name = kcu.constraint_name
        JOIN information_schema.constraint_column_usage AS ccu
        ON ccu.constraint_name = tc.constraint_name
      WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = '#{table_name}'
      ORDER BY ccu.table_name
    )
  end

  def dynamic_touch_query(options)
    options.inject('') do |query, opts|
      query << %(
          UPDATE #{opts['foreign_table_name']} SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.#{opts['column_name']};)
    end
  end
end
